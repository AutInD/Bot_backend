
const express = require('express');
const bodyParser = require('body-parser');
const app = express().use(bodyParser.json());
const dfff = require('dialogflow-fulfillment');
const port = 5000;
const mysql = require('mysql');
const {Image} = require('dialogflow-fulfillment');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card} = require('dialogflow-fulfillment');
const {Suggestion} = require('dialogflow-fulfillment');
const {Payload} = require('dialogflow-fulfillment');
const { DateTime } = require('actions-on-google');
const moment = require('moment');
const getFacebookIds = require('get-facebook-id');
const VERIFY_TOKEN = 'Jamemo';
prodName = '';
form = [];
timedate = new Date();
countProduct = 0;
totalCost = 0;
deliveryType = '';
statusDel = '';
cusName = '';
cusAdd = '';
cusTel = '';
currentDate = '';
tracking = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏';
addressTemp = '';
phoneNumberTemp = '';
givenNameTemp = '';
lastNameTemp = '';

process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements



app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())

  app.listen(port, () => {
	console.log(`üåè Server is running at http://localhost:${port}`)
});
app.get('/', function (_req, res) {
  res.send('Hello World');
});

app.post('/webhook', express.json(), (req, res)=>{
    const agent = new dfff.WebhookClient({request : req,response : res});
    JSON.stringify(req.headers);
    JSON.stringify(req.body);
    console.log(req);
      let action = req.body.queryResult.action; 
      console.log(action);
      let responseJson = {};
    responseJson.fulfillmentText = 'This is an endpoint published to RunKit'; // displayed response 



    function connectToDatabase(){
      const connection = mysql.createConnection({
      host     : '188.166.223.10',
      user     : 'authapol',
      password : '4150Tainner!',
      database : 'ChatBotForSMEsDB'
      });
      return new Promise((resolve,reject) => {
        connection.connect();
        resolve(connection);
     });
    }
    function queryDatabase(connection){
      return new Promise((resolve, reject) => {
        connection.query('SELECT * FROM Product' , (error, results, fields) => {
          resolve(results);
        });
      });
    }

    function insertIntoDatabase(connection, data){
      return new Promise((resolve, reject) => {
        connection.query('INSERT INTO ChatBotForSMEsDB.Order SET ?',  data, (error, results, fields) => {
          resolve(results);
        });
      });
    }
    
    async function product(agent){
      const user_email = agent.parameters.Product;
    return connectToDatabase()
    .then(connection => {
      return queryDatabase(connection)
      .then(result => {
        //console.log(result);
        result.map(user => {
          if(user_email === user.Product){
            const card = new Card(`${user.Product_Name} ‡∏£‡∏≤‡∏Ñ‡∏≤: ${user.Product_Cost}`);
            card.setImage(`https://8c44-1-46-158-203.ngrok.io/${user.Product_Picture}`);
            card.setText(`${user.Product_Detail}`);
            card.setButton({text: `‡∏™‡∏±‡πà‡∏á`+user.Product_Name, url:`${user.Product_Name}`});
            agent.add(card);

            
          }
        }); agent.add("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏ä‡∏á‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞")
        connection.end();
      });
    });
    }

    async function demo(agent){ 
      const user_email = agent.parameters.Product;
    return connectToDatabase()
    .then(connection => {
      return queryDatabase(connection)
      .then(result => {
        //console.log(result);
        result.map(user => {
          const payload = {
            key: 'value',
            key2: 2
          };
          
          agent.add(
            new WebhookClient(agent.UNSPECIFIED, payload, {rawPayload: true, sendAsMessage: true})
          );
        });        
        connection.end();
      });
    });
    }


    function Order(agent){      
      const {
        producttype1, number1      
      } = agent.parameters;
      countProduct = number1;
      prodName = producttype1
      totalCost = CostCalculate(producttype1, number1);
      currentDate = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');
      /*Order_form('Order_CountProduct: '+number1);
      Order_form('Order_TotalCost: '+CostCalculate(producttype1, number1));
      Order_form('Order_Date: '+moment(new Date()).format('YYYY-MM-DD HH:mm:ss'));*/ 
      
          let richResponses = [
            {
              "quickReplies":{
                "title": "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏î‡∏µ‡∏Ñ‡∏∞ ‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Kerry ‡πÅ‡∏•‡∏∞ Flash express ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡πà‡∏∞",
                
                "quickReplies":[
                  "Kerry",
                  "Flash express",
                  "Kerry(COD)",
                  "Flash express(COD)"
                ]
              },
              "plateform": "FACEBOOK"
            }
          ]
        responseJson.fulfillmentMessages = richResponses;
        console.log(responseJson);
        res.json(responseJson);  
        agent.add("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "+producttype1+" ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "+number1+ " ‡∏ä‡∏∏‡∏î‡∏ô‡∏∞‡∏Ñ‡∏∞")
        agent.add("‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+totalCost+" ‡∏ö‡∏≤‡∏ó")
        agent.add("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏î‡∏µ‡∏Ñ‡∏∞ ‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Kerry ‡πÅ‡∏•‡∏∞ Flash express ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡πà‡∏∞")
      

      /*agent.add(new Suggestion('Flash Express'));
      agent.add(new Suggestion('Flash Express(COD)'));
      agent.add(new Suggestion('Kerry'));
      agent.add(new Suggestion('Kerry(COD)'));*/
      
      }
  
  
    
    function CostCalculate(producttype, number){
      if (producttype=='‡πÄ‡∏´‡πá‡∏î‡∏´‡∏•‡∏¥‡∏ô‡∏à‡∏∑‡∏≠'){
        return 360*number;
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥‡∏ú‡∏™‡∏°‡∏á‡∏≤‡∏î‡∏≥'){
        return 250*number
      }
      else if (producttype=='‡∏ü‡πâ‡∏≤‡∏ó‡∏•‡∏≤‡∏¢‡πÇ‡∏à‡∏£‡∏ú‡∏™‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß'){
        return 180*number
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß‡∏ú‡∏™‡∏°‡∏Ç‡∏¥‡∏á'){
        return 250*number 
      }
      else if (producttype=='‡∏ñ‡∏±‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏≠‡∏á'){
        return 350*number
      }
    }

    function CompareProduct(producttype){
      if (producttype=='‡πÄ‡∏´‡πá‡∏î‡∏´‡∏•‡∏¥‡∏ô‡∏à‡∏∑‡∏≠'){
        return 22;
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥‡∏ú‡∏™‡∏°‡∏á‡∏≤‡∏î‡∏≥'){
        return 23
      }
      else if (producttype=='‡∏ü‡πâ‡∏≤‡∏ó‡∏•‡∏≤‡∏¢‡πÇ‡∏à‡∏£‡∏ú‡∏™‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß'){
        return 24
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß‡∏ú‡∏™‡∏°‡∏Ç‡∏¥‡∏á'){
        return 25 
      }
      else if (producttype=='‡∏ñ‡∏±‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏≠‡∏á'){
        return 26
      }
      else{
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
      }
    }

    
    function Order_form(inform){
        form.push(inform);
        return form;
    }


    function Delivery(agent){
      const {
        deliverytype
      } = agent.parameters;
      deliveryType = deliverytype;
      statusDel = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
      if(deliverytype == 'Flash Express'){
          let richResponses = [
            {
              "quickReplies":{
                "title": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "+prodName+" "+countProduct+" ‡∏ä‡∏∏‡∏î"+ "‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö "+ deliverytype + "\n\n" + "‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó \n\n" + "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞",
                
                "quickReplies":[
                  "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                  "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                ]
              },
              "plateform": "FACEBOOK"
            }
          ]
          responseJson.fulfillmentMessages = richResponses;
          console.log(responseJson);
          res.json(responseJson);  
      }else if(deliverytype == 'Kerry'){
          let richResponses = [
            {
              "quickReplies":{
                "title": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "+prodName+" "+countProduct+" ‡∏ä‡∏∏‡∏î"+ "‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö "+ deliverytype + "\n\n" + "‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó \n\n" + "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞",
                
                "quickReplies":[
                  "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                  "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                ]
              },
              "plateform": "FACEBOOK"
            }
          ]
          responseJson.fulfillmentMessages = richResponses;
          console.log(responseJson);
          res.json(responseJson); 
      }else if(deliverytype == 'Flash Express (COD)'){          
          let richResponses = [
            {
              "quickReplies":{
                "title": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "+prodName+" "+countProduct+" ‡∏ä‡∏∏‡∏î"+ "‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö "+ deliverytype + "\n\n" + "‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó \n\n" + "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞",
                
                "quickReplies":[
                  "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                  "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                ]
              },
              "plateform": "FACEBOOK"
            }
          ]
          responseJson.fulfillmentMessages = richResponses;
          console.log(responseJson);
          res.json(responseJson); 
      }else if(deliverytype == 'Kerry (COD)'){
          let richResponses = [
            {
              "quickReplies":{
                "title": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "+prodName+" "+countProduct+" ‡∏ä‡∏∏‡∏î"+ "‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö "+ deliverytype + "\n\n" + "‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó \n\n" + "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞",
                
                "quickReplies":[
                  "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                  "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                ]
              },
              "plateform": "FACEBOOK"
            }
          ]
          responseJson.fulfillmentMessages = richResponses;
          console.log(responseJson);
          res.json(responseJson); 
      }
    }

    function DeliveryYes(agent){
      if(deliveryType == 'Flash Express'){
        agent.add("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£ xxx x xxxxx x ‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå xxx x xxxxx x ‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ xxx x xxx xx x ‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô xxx xxx xxx xxx")
        agent.add("‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏∞‡∏Ñ‡∏∞")
      }else if(deliveryType == 'Kerry'){
        agent.add("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£ xxx x xxxxx x ‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå xxx x xxxxx x ‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ xxx x xxx xx x ‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô xxx xxx xxx xxx")
        agent.add("‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏∞‡∏Ñ‡∏∞")
      }else if(deliveryType == 'Flash Express (COD)'){
        agent.add("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏õ‡πá‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó‡∏ô‡∏∞‡∏Ñ‡∏∞")
        agent.add("‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞")
      }else if(deliveryType == 'Kerry (COD)'){
        agent.add("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏õ‡πá‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó‡∏ô‡∏∞‡∏Ñ‡∏∞")
        agent.add("‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞")
      }
    }

    function Cus_Address(agent){
      const {
        any, phone, name
      } = agent.parameters;
      cusName = name;
      cusTel = phone;
      cusAdd = any;
      tracking = 'None';
      /*Order_form('Order_CusName: '+name);
      Order_form('Order_CusTel: '+phone);
      Order_form('Order_CusAdd: '+any);
      Order_form('Order_Tracking: '+'None');*/
      agent.add("‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞")
    }

    function Payment(agent){ // ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        const imageUrl = agent.request_.body.originalDetectIntentRequest.payload.data.message.attachments[0].payload.url;
        agent.add("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ô‡∏∞")
        console.log(imageUrl);
    }

    function PaymentAddress(agent){ // ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        const {
          address, phoneNumber, givenName, lastName
        } = agent.parameters;
        console.log(givenName + " " + lastName + " " + address + " " + phoneNumber )
        agent.add("‡∏™‡∏±‡πà‡∏á " + prodName + " " + countProduct + " ‡∏ä‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á " + deliveryType + " ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì" + givenName + " " + lastName + " " + address + " " + phoneNumber +" ‡∏ô‡∏∞‡∏Ñ‡∏∞")
        agent.add("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏õ‡∏∞‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞")
    }

    function GetAddress(agent){ // ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô
      const {
        address, phoneNumber, givenName, lastName
      } = agent.parameters;
        addressTemp = address;
        phoneNumberTemp = phoneNumber;
        givenNameTemp = givenName;
        lastNameTemp = lastName;
        console.log(givenName + " " + lastName + " " + address + " " + phoneNumber )

        agent.add("‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞")
    }

    function AddressPayment(agent){ // ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      const imageUrl = agent.request_.body.originalDetectIntentRequest.payload.data.message.attachments[0].payload.url;
      agent.add("‡∏™‡∏±‡πà‡∏á " + prodName + " " + countProduct + " ‡∏ä‡∏∏‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó ‡πÇ‡∏î‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á " + deliveryType + " ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì" + givenNameTemp + " " + lastNameTemp + " " + addressTemp + " " + phoneNumberTemp +" ‡∏ô‡∏∞‡∏Ñ‡∏∞")
      agent.add("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏õ‡∏∞‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞")    
      console.log(imageUrl);
    }

    function GetAddressCOD(agent){
        const {
          address, phoneNumber, givenName, lastName
        } = agent.parameters;
        console.log(givenName + " " + lastName + " " + address + " " + phoneNumber )
        agent.add("‡∏™‡∏±‡πà‡∏á " + prodName + " " + countProduct + " ‡∏ä‡∏∏‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô "+ totalCost +" ‡∏ö‡∏≤‡∏ó ‡πÇ‡∏î‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á " + deliveryType + " ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì" + givenName + " " + lastName + " " + address + " " + phoneNumber +" ‡∏ô‡∏∞‡∏Ñ‡∏∞")
        agent.add("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏õ‡∏∞‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞")    
    }

    async function WriteOrder(agent){  
      console.log(data);
      var data = {
        Order_CountProduct: countProduct,
        Order_TotalCost: totalCost,
        Order_DeliveryType: deliveryType,        
        Order_Status: statusDel,
        Order_CusName: cusName,
        Order_CusAdd: cusAdd,
        Order_CusTel: cusTel,
        Order_Date: currentDate,        
        Order_Tracking: tracking,
      };
      console.log(data);
      const connection = await connectToDatabase();
      const result_2 = await insertIntoDatabase(connection, data);
      agent.add(`‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      form = [];
      connection.end();
      }
        

    var intentMap = new Map();
    intentMap.set('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',product)
    intentMap.set('OrderIn', WriteOrder)
    intentMap.set('‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', Order)
    intentMap.set('‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', Cus_Address)
    intentMap.set('Payment', Payment)
    intentMap.set('Payment - custom', PaymentAddress)
    intentMap.set('DeliveryChoose', Delivery)
    intentMap.set('DeliveryChoose - yes', DeliveryYes)
    intentMap.set('Address', GetAddress)
    intentMap.set('Address - custom', AddressPayment)
    intentMap.set('AddressCOD', GetAddressCOD)
    /*intentMap.set('test', test1)*/
    agent.handleRequest(intentMap);
});
