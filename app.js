const express = require('express');
const app = express();
const dfff = require('dialogflow-fulfillment');
const port = 3000;
const mysql = require('mysql');
const {Image} = require('dialogflow-fulfillment');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');
const {Payload} = require('dialogflow-fulfillment');
const { DateTime } = require('actions-on-google');
const moment = require('moment');
form = [];
timedate = new Date();
Status = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô";
totalCost = 0;
Tracking = "";
  app.listen(port, () => {
	console.log(`üåè Server is running at http://localhost:${port}`)
})

app.get('/', (req, res)=>{
    res.send("Working")
});

app.post('/', express.json(), (req, res)=>{
    const agent = new dfff.WebhookClient({
        request : req,
        response : res
    });

    function connectToDatabase(){
      const connection = mysql.createConnection({
      host     : '188.166.223.10',
      user     : 'authapol',
      password : '4150Tainner!',
      database : 'ChatBotForSMEsDB'
      });
      return new Promise((resolve,reject) => {
        connection.connect();
        resolve(connection);
     });
    }
    function queryDatabase(connection){
      return new Promise((resolve, reject) => {
        connection.query('SELECT * FROM Product' , (error, results, fields) => {
          resolve(results);
        });
      });
    }

    function insertIntoDatabase(connection, data){
      return new Promise((resolve, reject) => {
        connection.query('INSERT INTO ChatBotForSMEsDB.Order SET ?',  data, (error, results, fields) => {
          resolve(results);
        });
      });
    }
    
    async function product(agent){
      const user_email = agent.parameters.Product;
    return connectToDatabase()
    .then(connection => {
      return queryDatabase(connection)
      .then(result => {
        //console.log(result);
        result.map(user => {
          if(user_email === user.Product){
            const card = new Card(`${user.Product_Name} ‡∏£‡∏≤‡∏Ñ‡∏≤: ${user.Product_Cost}`);
            card.setImage(`https://8c44-1-46-158-203.ngrok.io/${user.Product_Picture}`);
            card.setText(`${user.Product_Detail}`);
            card.setButton({text: `‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏¢`, url:`${user.Product_Name}`});
            agent.add(card);
          }
        }); agent.add("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏ä‡∏á‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞")
        connection.end();
      });
    });
    }

    async function demo(agent){ 
      const user_email = agent.parameters.Product;
    return connectToDatabase()
    .then(connection => {
      return queryDatabase(connection)
      .then(result => {
        //console.log(result);
        result.map(user => {
          const payload = {
            key: 'value',
            key2: 2
          };
          
          agent.add(
            new WebhookClient(agent.UNSPECIFIED, payload, {rawPayload: true, sendAsMessage: true})
          );
        });        
        connection.end();
      });
    });
    }

    function Order(agent){      
      const {
        producttype1, number1      
      } = agent.parameters;
      Order_form(number1);
      Order_form(CostCalculate(producttype1, number1));
      Order_form(moment(new Date()).format('YYYY-MM-DD HH:mm:ss'));
      agent.add("---- ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ----")
      agent.add("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏î‡∏µ‡∏Ñ‡∏∞ ‡∏°‡∏µ Kerry ‡∏Å‡∏±‡∏ö Flash Express ‡∏Ñ‡πà‡∏∞ ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡πá‡∏°‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞")
    }
    
    function CostCalculate(producttype, number){
      if (producttype=='‡πÄ‡∏´‡πá‡∏î‡∏´‡∏•‡∏¥‡∏ô‡∏à‡∏∑‡∏≠'){
        return 360*number;
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥‡∏ú‡∏™‡∏°‡∏á‡∏≤‡∏î‡∏≥'){
        return 250*number
      }
      else if (producttype=='‡∏ü‡πâ‡∏≤‡∏ó‡∏•‡∏≤‡∏¢‡πÇ‡∏à‡∏£‡∏ú‡∏™‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß'){
        return 180*number
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß‡∏ú‡∏™‡∏°‡∏Ç‡∏¥‡∏á'){
        return 250*number 
      }
      else if (producttype=='‡∏ñ‡∏±‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏≠‡∏á'){
        return 350*number
      }
    }

    function CompareProduct(producttype){
      if (producttype=='‡πÄ‡∏´‡πá‡∏î‡∏´‡∏•‡∏¥‡∏ô‡∏à‡∏∑‡∏≠'){
        return 22;
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥‡∏ú‡∏™‡∏°‡∏á‡∏≤‡∏î‡∏≥'){
        return 23
      }
      else if (producttype=='‡∏ü‡πâ‡∏≤‡∏ó‡∏•‡∏≤‡∏¢‡πÇ‡∏à‡∏£‡∏ú‡∏™‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß'){
        return 24
      }
      else if (producttype=='‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß‡∏ú‡∏™‡∏°‡∏Ç‡∏¥‡∏á'){
        return 25 
      }
      else if (producttype=='‡∏ñ‡∏±‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏≠‡∏á'){
        return 26
      }
      else{
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
      }
    }

    function Order_form(inform){
        form.push(inform);
        console.log(form)
        return form;
    }

    function Kerry(agent){
      const {
        deliverytype      
      } = agent.parameters;
      Order_form(deliverytype);
      Order_form('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
      agent.add("--‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô--")
      agent.add("‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£ xxx x xxxxx x ‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå xxx x xxxxx x ‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ xxx x xxx xx x ‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô xxx xxx xxx xxx")
      agent.add("‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏∞‡∏Ñ‡∏∞")
    }

    function Cus_Address(agent){
      const {
        any, phone, name
      } = agent.parameters;
      Order_form(name);
      Order_form(phone);
      Order_form(any);
      Order_form('None');
      agent.add("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏°‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞")
    }

    function Payment(agent){
      const {
        Payment
      } = agent.parameters;
      form.pop();
      form.push('‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      agent.add("‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞")
      console.log(form);
    }

    async function WriteOrder(agent){   
       
      const data = {
        Order_CountProduct: 6,
        Order_TotalCost: 2200,
        Order_Date: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),
        Order_Status: `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô`,
        Order_CusName: `‡∏≠‡∏£‡∏£‡∏ñ‡∏û‡∏• ‡∏ï‡∏±‡∏ô‡∏ï‡∏¥‡∏ß‡∏±‡∏í‡∏ô‡∏∞‡∏ú‡∏•`,
        Order_CusTel: `0827754150`,
        Order_CusAdd: `110/9 ‡∏°.5 ‡∏ï.‡∏ö‡∏∂‡∏á ‡∏≠.‡∏®‡∏£‡∏µ‡∏£‡∏≤‡∏ä‡∏≤ ‡∏à.‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ`,
        Order_DeliveryType: `Kerry`,
        Order_Tracking: `none`,
      };
      const connection = await connectToDatabase();
      const result_2 = await insertIntoDatabase(connection, data);
      agent.add(`‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      console.log(form);
      form = [];
      console.log(form);
      console.log(data);
      connection.end();
      }
        

    var intentMap = new Map();
    intentMap.set('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',product)
    intentMap.set('OrderIn', WriteOrder)
    intentMap.set('‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', Order)
    intentMap.set('Delivery.Kerry', Kerry)
    intentMap.set('‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', Cus_Address)
    intentMap.set('Payment', Payment)
    /*intentMap.set('test', test1)*/
    agent.handleRequest(intentMap);
});
